---
import { getCollection } from 'astro:content';
import Icon from '$components/Icon.svelte';

const { rare = false } = Astro.props;

const cantrips = await Promise.all(
  (await getCollection('cantrips'))
    .sort((a, b) => a.data.title.localeCompare(b.data.title))
    .map((c) => ({ title: c.data.title, slug: c.slug })),
);

const charms = await Promise.all(
  (await getCollection('charms'))
    .filter((a) => a.data.rare === rare)
    .sort((a, b) => a.data.title.localeCompare(b.data.title)),
);

function cost(c) {
  if (c.data.ap || c.data.fatigue) {
    let st = '';
    if (c.data.ap) st += `+${c.data.ap} AP`;
    if (c.data.ap && c.data.fatigue) st += ' | ';
    if (c.data.fatigue) st += `+${c.data.fatigue} Fatigue`;
    return st;
  } else {
    return false;
  }
}
---

<div class="filter">
  <select name="charm-list" class="charm-list">
    <option value="all">All</option>
    {cantrips.map((c) => <option value={c.slug}>{c.title}</option>)}
  </select>
</div>

{
  charms.map((c) => (
    <section
      id={c.slug}
      class="charms"
      data-list={c.data.spells.map((s) => s.id).join(', ')}
    >
      <h3>
        <span>{c.data.title}</span>
        {c.data.concentration && (
          <Icon label="Concentration" icon="concentration" />
        )}
      </h3>

      <ul class="tags">
        {c.data.spells.map((l) => (
          <li class="tag">{l.id}</li>
        ))}
      </ul>

      {cost(c) && <p>{cost(c)}</p>}

      <ul class="tags">
        {c.data.tags.map((t) => (
          <li class="tag">{t}</li>
        ))}
      </ul>

      <div class="type" set:html={c.rendered.html} />
    </section>
  ))
}

<script type="module">
  const select = document.querySelectorAll('.charm-list');
  const charms = document.querySelectorAll('.charms');

  function swap(e) {
    const { value } = e.target;
    if (value === 'all') {
      for (const charm of charms) {
        charm.style.display = 'grid';
      }
    } else {
      for (const charm of charms) {
        const list = charm.dataset.list.split(', ');
        if (list.includes(value)) {
          charm.style.display = 'grid';
        } else {
          charm.style.display = 'none';
        }
      }
    }

    for (const s of select) {
      if (s.value !== value) {
        s.value = value;
      }
    }
  }

  for (const s of select) {
    s.addEventListener('change', swap);
  }
</script>

<style lang="scss">
  section {
    display: grid;
    gap: 1rem;
  }

  h3,
  h4 {
    margin-block-end: 0;
  }

  h3 {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;

    :global(.icon) {
      height: 0.75em;
      width: 0.75em;
    }
  }

  .type {
    width: 100%;
  }

  td {
    text-transform: capitalize;

    :global(button) {
      text-transform: capitalize;
    }
  }

  .save {
    text-transform: uppercase;

    :global(button) {
      text-transform: uppercase;
    }
  }

  .tags {
    display: flex;
    column-gap: 1rem;
    row-gap: 0;
    flex-wrap: wrap;
    margin: 0;
    padding: 0;
  }

  .filter {
    display: flex;
    justify-content: flex-end;
  }

  #spell-list {
    width: 15ch;
    border: 1px solid var(--dark-yellow);
    border-radius: 0.25rem;
  }
</style>
